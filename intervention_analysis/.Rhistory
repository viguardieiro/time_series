lines(InvBoxCox(data.trend[141:164], lambda = lambda))
#Chosen model is AR2
checkresiduals(model.AR2)
checkresiduals(model.AR2, lag = 24)
jarque.bera.test(model.AR2$residuals)
source('C:/Users/giova/Desktop/FGV/time_series/arima_estim/debitcards.R', echo=TRUE)
source('C:/Users/giova/Desktop/FGV/time_series/arima_estim/debitcards.R', echo=TRUE)
library(tseries)
library(zoo)
source('C:/Users/giova/Desktop/FGV/time_series/arima_estim/debitcards.R', echo=TRUE)
par(mfrow = c(1, 1))
plot(forecast(model.AR2, h = 3, lambda = lambda, biasadj = TRUE), include = 0,
xlim = c(0, 28), ylim = c(10, 30))
lines(InvBoxCox(model.AR2$fitted, lambda = lambda), col = 'red')
lines(data[141:164])
lines(InvBoxCox(data.trend[141:164], lambda = lambda), col = "blue")
legend("bottomleft", legend=c("Real", "Real without seasonality", "Prediction without seasonality"), col=c('black','blue', 'red'), lty = 1:1, cex=0.8)
plot(forecast(model.AR2, h = 3, lambda = lambda, biasadj = TRUE), include = 0,
xlim = c(0, 28), ylim = c(10, 30))
lines(InvBoxCox(model.AR2$fitted, lambda = lambda), col = 'red')
lines(InvBoxCox(data.trend[141:164], lambda = lambda), col = "blue")
legend("bottomleft", legend=c("Real without seasonality", "Prediction without seasonality"), col=c('blue', 'red'), lty = 1:1, cex=0.8)
plot(forecast(model.AR2, h = 3, lambda = lambda, biasadj = TRUE), include = 0,
xlim = c(0, 28), ylim = c(18, 28))
lines(InvBoxCox(model.AR2$fitted, lambda = lambda), col = 'red')
lines(InvBoxCox(data.trend[141:164], lambda = lambda), col = "blue")
legend("bottomleft", legend=c("Real without seasonality", "Prediction without seasonality"), col=c('blue', 'red'), lty = 1:1, cex=0.8)
plot(forecast(model.AR2, h = 3, lambda = lambda, biasadj = TRUE), include = 0,
xlim = c(0, 28), ylim = c(18, 26))
lines(InvBoxCox(model.AR2$fitted, lambda = lambda), col = 'red')
lines(InvBoxCox(data.trend[141:164], lambda = lambda), col = "blue")
legend("bottomleft", legend=c("Real without seasonality", "Prediction without seasonality"), col=c('blue', 'red'), lty = 1:1, cex=0.8)
plot(forecast(model.AR2, h = 3, lambda = lambda, biasadj = TRUE), include = 0,
xlim = c(0, 28), ylim = c(20, 26))
lines(InvBoxCox(model.AR2$fitted, lambda = lambda), col = 'red')
lines(InvBoxCox(data.trend[141:164], lambda = lambda), col = "blue")
legend("topleft", legend=c("Real without seasonality", "Prediction without seasonality"), col=c('blue', 'red'), lty = 1:1, cex=0.8)
plot(forecast(model.AR2, h = 3, lambda = lambda, biasadj = TRUE), include = 0,
xlim = c(0, 28), ylim = c(20, 25))
lines(InvBoxCox(model.AR2$fitted, lambda = lambda), col = 'red')
lines(InvBoxCox(data.trend[141:164], lambda = lambda), col = "blue")
legend("topleft", legend=c("Real without seasonality", "Prediction without seasonality"), col=c('blue', 'red'), lty = 1:1, cex=0.8)
season.forecast <- stl.fit$time.series[(165-12):(167-12), 1]
saeson.forecast
season.forecast
forecast(model.AR2, h = 3)
as.data.frame(forecast(model.AR2, h = 3))
as.data.frame(forecast(model.AR2, h = 3)) + season.forecast
arima_forecast_season <- as.data.frame(forecast(model.AR2, h = 3)) + season.forecast
arima_forecast_season
sapply(arima_forecast_season, InvBoxCox(lambda = lambda))
sapply(arima_forecast_season, InvBoxCox, lambda = lambda)
forecast(model.AR2, h = 3, include = 24)
model.AR2$fitted
plot(data[141:164])
plot(data[141:164], type = 'line')
plot(data[141:164], type = 'l')
plot(data[141:164], type = 'l', ylab = "Value")
plot(data[141:164], type = 'l', ylab = "Value", xlab = "Date")
model.AR1$fitted
stl.fit$time.series[141:164, 1]
model.AR1$fitted + stl.fit$time.series[141:164, 1]
InvBoxCox(model.AR1$fitted + stl.fit$time.series[141:164, 1], lambda = lambda)
arima_fitted_season <- InvBoxCox(model.AR1$fitted + stl.fit$time.series[141:164, 1], lambda = lambda)
lines(arima_fitted_season, col = 'red')
points(arima_forecast_season$`Point Forecast`, col = "cyan")
plot(data[141:164], type = 'l', ylab = "Value", xlab = "Date", xlim = c(1, 27))
lines(arima_fitted_season, col = 'red')
points(arima_forecast_season$`Point Forecast`, col = "cyan")
arima_forecast_season$`Point Forecast`
arima_forecast_season <-sapply(arima_forecast_season, InvBoxCox, lambda = lambda)
points(arima_forecast_season$`Point Forecast`, col = "cyan")
arima_forecast_season
season.forecast <- stl.fit$time.series[(165-12):(167-12), 1]
arima_forecast_season <- as.data.frame(forecast(model.AR2, h = 3)) + season.forecast
arima_forecast_season <- as.data.frame(sapply(arima_forecast_season, InvBoxCox, lambda = lambda))
arima_forecast_season
points(arima_forecast_season$`Point Forecast`, col = "cyan")
points(arima_forecast_season$`Point Forecast`, col = "cyan")
points(x = c(25, 26, 27), y = arima_forecast_season$`Point Forecast`, col = "cyan")
stl.fit$time.series[(165-12):(167-12), 1]
forecast(stl.fit, h = 3)
InvBoxCox(forecast(stl.fit, h = 3), lambda = lambda)
InvBoxCox(stl.fit$time.series[(165-12):(167-12), 1], lambda = lambda)
sapply(as.data.frame(forecast(model.AR2, h =3)), InvBoxCox, lambda = lambda)
sapply(as.data.frame(forecast(model.AR2, h =3)), InvBoxCox, lambda = lambda) + InvBoxCox(stl.fit$time.series[(165-12):(167-12), 1], lambda = lambda)
arima_forecast_season <- sapply(as.data.frame(forecast(model.AR2, h =3)),
InvBoxCox,
lambda = lambda) +
InvBoxCox(stl.fit$time.series[(165-12):(167-12), 1], lambda = lambda)
plot(data[141:164], type = 'l', ylab = "Value", xlab = "Date", xlim = c(1, 27))
lines(arima_fitted_season, col = 'red')
points(x = c(25, 26, 27), y = arima_forecast_season$`Point Forecast`, col = "cyan")
arima_forecast_season[:, 1]
arima_forecast_season[, 1]
arima_forecast_season
points(x = c(25, 26, 27), y = arima_forecast_season[, 1], col = "cyan")
#season.forecast <- stl.fit$time.series[(165-12):(167-12), 1]
#arima_forecast_season <- as.data.frame(forecast(model.AR2, h = 3)) + season.forecast
arima_forecast_season <- sapply(as.data.frame(forecast(model.AR2, h =3)) + stl.fit$time.series[(165-12):(167-12), 1],
InvBoxCox,
lambda = lambda)
arima_forecast_season[, 1]
plot(data[141:164], type = 'l', ylab = "Value", xlab = "Date", xlim = c(1, 27))
lines(arima_fitted_season, col = 'red')
points(x = c(25, 26, 27), y = arima_forecast_season[, 1], col = "cyan")
?points
points(x = c(25, 26, 27), y = arima_forecast_season[, 1], col = "cyan", pch = 46)
plot(data[141:164], type = 'l', ylab = "Value", xlab = "Date", xlim = c(1, 27))
lines(arima_fitted_season, col = 'red')
points(x = c(25, 26, 27), y = arima_forecast_season[, 1], col = "cyan", pch = ".")
plot(data[141:164], type = 'l', ylab = "Value", xlab = "Date", xlim = c(1, 27))
lines(arima_fitted_season, col = 'red')
points(x = c(25, 26, 27), y = arima_forecast_season[, 1], pch = ".")
plot(data[141:164], type = 'l', ylab = "Value", xlab = "Date", xlim = c(1, 27))
lines(arima_fitted_season, col = 'red')
points(x = c(25, 26, 27), y = arima_forecast_season[, 1], pch = 16)
points(x = c(25, 26, 27), y = arima_forecast_season[, 1], pch = 16, col = "cyan")
points(x = c(25, 26, 27), y = arima_forecast_season[, 1], pch = 16, col = "#0000AA")
arima_forecast_season
arima_forecast_season[,2]
c(arima_forecast_season[,2], arima_forecast_season[,3])
polygon(x = c(25, 26, 27, 27, 26, 25), y = c(arima_forecast_season[,2], arima_forecast_season[,3]))
polygon(x = c(25, 26, 27, 27, 26, 25), y = c(arima_forecast_season[,2], arima_forecast_season[,3]), col = "#596DD5")
polygon(x = c(25, 26, 27, 27, 26, 25), y = c(arima_forecast_season[,4], arima_forecast_season[,5]), col = "#D5DBFF")
polygon(x = c(25, 26, 27, 27, 26, 25), y = c(arima_forecast_season[,2], arima_forecast_season[,3]), col = "#596DD5")
points(x = c(25, 26, 27), y = arima_forecast_season[, 1], pch = 16, col = "#0000AA")
polygon(x = c(25, 26, 27, 27, 26, 25), y = c(arima_forecast_season[,4], arima_forecast_season[,5]), col = "#D5DBFF", border =  "NA")
polygon(x = c(25, 26, 27, 27, 26, 25), y = c(arima_forecast_season[,2], arima_forecast_season[,3]), col = "#596DD5", border = "NA")
par(mfrow = c(1, 1))
arima_forecast_season <- sapply(as.data.frame(forecast(model.AR2, h =3)) + stl.fit$time.series[(165-12):(167-12), 1],
InvBoxCox,
lambda = lambda)
arima_fitted_season <- InvBoxCox(model.AR1$fitted + stl.fit$time.series[141:164, 1], lambda = lambda)
plot(data[141:164], type = 'l', ylab = "Value", xlab = "Date", xlim = c(1, 27))
lines(arima_fitted_season, col = 'red')
polygon(x = c(25, 26, 27, 27, 26, 25), y = c(arima_forecast_season[,4], arima_forecast_season[,5]), col = "#D5DBFF", border =  "NA")
polygon(x = c(25, 26, 27, 27, 26, 25), y = c(arima_forecast_season[,2], arima_forecast_season[,3]), col = "#596DD5", border = "NA")
points(x = c(25, 26, 27), y = arima_forecast_season[, 1], pch = 16, col = "#0000AA")
plot(data[141:164], type = 'l', ylab = "Value", xlab = "Date", xlim = c(1, 27), main = "Forecast on real scale")
lines(arima_fitted_season, col = 'red')
polygon(x = c(25, 26, 27, 27, 26, 25), y = c(arima_forecast_season[,4], arima_forecast_season[,5]), col = "#D5DBFF", border =  "NA")
plot(data[141:164], type = 'l', ylab = "Value", xlab = "Date", xlim = c(1, 27), main = "AR(2) Forecast on real scale")
lines(arima_fitted_season, col = 'red')
polygon(x = c(25, 26, 27, 27, 26, 25), y = c(arima_forecast_season[,4], arima_forecast_season[,5]), col = "#D5DBFF", border =  "NA")
polygon(x = c(25, 26, 27, 27, 26, 25), y = c(arima_forecast_season[,2], arima_forecast_season[,3]), col = "#596DD5", border = "NA")
points(x = c(25, 26, 27), y = arima_forecast_season[, 1], pch = 16, col = "#0000AA")
legend("bottomleft", legend=c("Real", "Prediction"), col=c('black', 'red'), lty = 1:1, cex=0.8)
legend("bottomleft", legend=c("Real", "Prediction", "Point Forecast"), col=c('black', 'red', "#0000AA"), lty = 1:1, cex=0.8)
plot(data[141:164], type = 'l', ylab = "Value", xlab = "Date", xlim = c(1, 27), ylim = c(19, 26), main = "AR(2) Forecast on real scale")
lines(arima_fitted_season, col = 'red')
polygon(x = c(25, 26, 27, 27, 26, 25), y = c(arima_forecast_season[,4], arima_forecast_season[,5]), col = "#D5DBFF", border =  "NA")
plot(data[141:164], type = 'l', ylab = "Value", xlab = "Date", xlim = c(1, 27), ylim = c(15, 28), main = "AR(2) Forecast on real scale")
lines(arima_fitted_season, col = 'red')
polygon(x = c(25, 26, 27, 27, 26, 25), y = c(arima_forecast_season[,4], arima_forecast_season[,5]), col = "#D5DBFF", border =  "NA")
polygon(x = c(25, 26, 27, 27, 26, 25), y = c(arima_forecast_season[,2], arima_forecast_season[,3]), col = "#596DD5", border = "NA")
points(x = c(25, 26, 27), y = arima_forecast_season[, 1], pch = 16, col = "#0000AA")
legend("bottomleft", legend=c("Real", "Prediction", "Point Forecast"), col=c('black', 'red', "#0000AA"), lty = 1:1, cex=0.8)
plot(forecast(stl.fit, h = 3))
arima_forecast_season <- sapply(as.data.frame(forecast(model.AR2, h =3)) + stl.fit$time.series[(165-12):(167-12), 1],
InvBoxCox,
lambda = lambda)
arima_fitted_season <- InvBoxCox(model.AR1$fitted + stl.fit$time.series[141:164, 1], lambda = lambda)
plot(data[141:164], type = 'l', ylab = "Value", xlab = "Date", xlim = c(1, 27), ylim = c(15, 28), main = "AR(2) Forecast on real scale")
lines(arima_fitted_season, col = 'red')
polygon(x = c(25, 26, 27, 27, 26, 25), y = c(arima_forecast_season[,4], arima_forecast_season[,5]), col = "#D5DBFF", border =  "NA")
polygon(x = c(25, 26, 27, 27, 26, 25), y = c(arima_forecast_season[,2], arima_forecast_season[,3]), col = "#596DD5", border = "NA")
points(x = c(25, 26, 27), y = arima_forecast_season[, 1], pch = 16, col = "#0000AA")
legend("bottomleft", legend=c("Real", "Prediction", "Point Forecast"), col=c('black', 'red', "#0000AA"), lty = 1:1, cex=0.8)
data <- auscafe
plot(data,
main = "Monthly expenditure on eating out in Australia",
ylab = "Expenditure")
lambda <- BoxCox.lambda(data)
data.stabilized <- BoxCox(data, lambda)
plot(data.stabilized,
main = 'Monthly expenditure on eating out in Australia after BoxCox',
ylab = 'Value')
stl.fit <- stl(data.stabilized, s.window = 12)
plot(stl.fit)
data.trend <- data.stabilized - stl.fit$time.series[, 1]
plot(data.trend, main = "Monthly expenditure on eating out - \n Stabilized and without seasonality",
ylab = "Value")
adf.test(data.trend)
#Testing diff 1
adf.test(diff(data.trend))
plot(diff(data.trend),
main = 'auscafe series (diff 1)',
ylab = 'Value')
par(mfrow = c(2, 1))
acf(diff(data.trend), main = "ACF auscafe series (diff 1)")
pacf(diff(data.trend), main = "PACF auscafe series (diff 1)")
eval_AR1 <- function(data){
m <- Arima(data, order = c(1, 1, 0))
return(AIC(m))
}
AIC_AR1 <- rollapply(data.trend, width = 24, FUN = eval_AR1)
model.AR1 <- Arima(data.trend[403:426], order = c(1, 1, 0))
summary(model.AR1)
\par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
plot(forecast(model.AR1, h = 3, lambda = lambda, biasadj = TRUE), include = 0,
xlim = c(0, 28), ylim = c(3.4, 3.8))
lines(InvBoxCox(model.AR1$fitted, lambda = lambda), col = 'red')
lines(InvBoxCox(data.trend[403:426], lambda = lambda))
eval_AR2 <- function(data){
m <- Arima(data, order = c(2, 1, 0), lambda = lambda, method="ML")
return(AIC(m))
}
AIC_AR2 <- rollapply(data.trend, width = 24, FUN = eval_AR2)
model.AR2 <- Arima(data.trend[403:426], order = c(2, 1, 0))
summary(model.AR2)
plot(forecast(model.AR2, h = 3, lambda = lambda, biasadj = TRUE), include = 0,
xlim = c(0, 28), ylim = c(3.4, 3.8))
lines(InvBoxCox(model.AR2$fitted, lambda = lambda), col = 'red')
lines(InvBoxCox(data.trend[403:426], lambda = lambda))
eval_ARMA11 <- function(data){
m <- Arima(data, order = c(1, 1, 1), lambda = lambda, method="ML")
return(AIC(m))
}
AIC_ARMA11 <- rollapply(data.trend, width = 24, FUN = eval_ARMA21)
eval_ARMA11 <- function(data){
m <- Arima(data, order = c(1, 1, 1), method="ML")
return(AIC(m))
}
AIC_ARMA11 <- rollapply(data.trend, width = 24, FUN = eval_ARMA21)
eval_ARMA11 <- function(data){
m <- Arima(data, order = c(1, 1, 1), lambda = lambda, method="ML")
return(AIC(m))
}
AIC_ARMA11 <- rollapply(data.trend, width = 24, FUN = eval_ARMA21)
eval_ARMA11 <- function(data){
m <- Arima(data, order = c(1, 1, 1), lambda = lambda, method="ML")
return(AIC(m))
}
AIC_ARMA11 <- rollapply(data.trend, width = 24, FUN = eval_ARMA11)
model.ARMA11 <- Arima(data.trend[403:426], order = c(1, 1, 1))
summary(model.ARMA11)
plot(forecast(model.ARMA11, h = 3, lambda = lambda, biasadj = TRUE), include = 0,
xlim = c(0, 28), ylim = c(3.4, 3.8))
lines(InvBoxCox(model.ARMA11$fitted, lambda = lambda), col = 'red')
lines(InvBoxCox(data.trend[403:426], lambda = lambda))
eval_ARMA21 <- function(data){
m <- Arima(data, order = c(2, 1, 1), lambda = lambda, method="ML")
return(AIC(m))
}
AIC_ARMA21 <- rollapply(data.trend, width = 24, FUN = eval_ARMA21)
model.ARMA21 <- Arima(data.trend[403:426], order = c(2, 1, 1))
summary(model.ARMA21)
plot(forecast(model.ARMA21, h = 3, lambda = lambda, biasadj = TRUE), include = 0,
xlim = c(0, 28), ylim = c(3.4, 3.8))
lines(InvBoxCox(model.ARMA21$fitted, lambda = lambda), col = 'red')
lines(InvBoxCox(data.trend[403:426], lambda = lambda))
plot(AIC_AR1, ylim = c(-150, 150), ylab = "AIC", main = "Comparison between AICs of models")
lines(AIC_AR2, col = "blue")
lines(AIC_ARMA11, col = "green")
lines(AIC_ARMA21, col = "red")
legend("topleft", legend=c("AR(1)", "AR(2)", "ARMA(1, 1)", "ARMA(2, 1)"), col=c('black','blue', 'green','red'), lty = 1:1, cex=0.8)
checkresiduals(model.AR1, lag = 24)
jarque.bera.test(model.AR1$residuals)
plot(forecast(model.AR1, h = 3, lambda = lambda, biasadj = TRUE), include = 0,
xlim = c(0, 28), ylim = c(3.2, 4.1))
lines(InvBoxCox(model.AR1$fitted, lambda = lambda), col = 'red')
lines(data[403:426])
lines(InvBoxCox(data.trend[403:426], lambda = lambda), col = "blue")
legend("topleft", legend=c("Real", "Real without seasonality", "Prediction without seasonality"), col=c('black','blue', 'red'), lty = 1:1, cex=0.8)
2^10
factorial(10)
1024/factorial(10)
x <- 0:9
x
x <- x/9
x
prod(x)
x <- 0.5 - x
prod(x)
prod(x) * 1024
prod(x) * 1024 / factorial(10)
x <- rep(NA, 1000)
random()
rand()
randu()
randu
runif()
runif(1)
ln(10)
log(10)
X <- rep(NA, 1000)
for(i = 1:1000){
u <- runif(1)
if(u < 0.5){
x <- 0.5*log(2*u)
X[i] <- x
}else{
x <- 0.5*log(2*(1-u))
X[i] <- x
}
}
source('~/.active-rstudio-document', echo=TRUE)
X
plot(X)
hist(X)
source('~/.active-rstudio-document', echo=TRUE)
plot(X)
hist(X)
x0 <- 0.1
x <- rep(NA, 30)
x <- rep(x0, 30)
for(i in 2:30){
x[i] <- 2*x[i-1]*(1 - x[i-1])
}
plot(x)
x0 <- 0.6
x <- rep(x0, 30)
for(i in 2:30){
x[i] <- 2*x[i-1]*(1 - x[i-1])
}
plot(x)
x0 <- 5
x <- rep(x0, 30)
for(i in 2:30){
x[i] <- 2*x[i-1]*(1 - x[i-1])
}
plot(x)
x0 <- 0.95
x <- rep(x0, 30)
for(i in 2:30){
x[i] <- 2*x[i-1]*(1 - x[i-1])
}
plot(x)
b <- 0.5
a <- 384400*1000
teta = 2*asin((b/2)/a)
teta
D <- 1.22 * 5500/teta
D
D/1000
D/1000^2
b <- 5
a <- 500*1000
teta = 2*asin((b/2)/a)
teta
lambda <- 80000
D <- 1.22 * lambda/teta
D
n <- 1:100
aprox <- n*sin(pi/n)
plot(aprox)
aprox > 3
aprox[7]
aprox[6]
t <- 1
a <- 2
b <- 3
atan(sqrt((b-a)/a))
atan(sqrt(b/t))/atan(sqrt(a/t))
2*atan(sqrt(b/t))/atan(sqrt(a/t))/PI
PI
pi
2*atan(sqrt(b/t))/atan(sqrt(a/t))/pi
atan(sqrt(b/t))/atan(sqrt(a/t))
2*atan(sqrt((b-a)/a))/pi
atan(sqrt((b-a)/a))
atan(sqrt((b-a)/(t+a)))
2*atan(sqrt((b-a)/(t+a)))/pi
1 - 2*atan(sqrt((b-a)/(t+a)))/pi
atan(sqrt(b/t))/atan(sqrt(a/t))
(1 - atan(sqrt(b/t)))/(1 - atan(sqrt(a/t)))
(1 - 2*atan(sqrt(b/t))/pi)/(1 - 2*atan(sqrt(a/t))/pi)
t <- 1
a <- 2
b <- 3
no_zero_t_a = 1 - 2 * atan(sqrt(a/t))/pi
no_zero_t_b = 1 - 2 * atan(sqrt(b/t))/pi
no_zero_t_b/no_zero_t_a
no_zero_a_b = 1 - 2*atan(sqrt((b-a)/(t+a)))/pi
dnorm(1)
dnorm(0)
?dnorm
pnorm(1)
1 - pnorm(1)
source('C:/Users/giova/Desktop/FGV/time_series/intervention_analysis/analysis.R', echo=TRUE)
setwd("C:/Users/giova/Desktop/FGV/time_series/intervention_analysis")
source('C:/Users/giova/Desktop/FGV/time_series/intervention_analysis/analysis.R', echo=TRUE)
knitr::opts_chunk$set(echo = FALSE, warnings = FALSE)
library(tseries)
library(zoo)
library(ggplot2)
library(forecast)
library(dplyr)
lambda
knitr::opts_chunk$set(echo = FALSE, warnings = FALSE, message = FALSE)
library(tseries)
library(zoo)
library(ggplot2)
library(forecast)
library(dplyr)
model1 <- arima(FRED_pre, order = c(2, 1,0), seasonal = c(3, 0, 0))
summary(model1)
model1 <- arima(FRED_pre, order = c(2, 1,0), seasonal = c(3, 0, 0))
summary(model1)
model1 <- arima(FRED_pre, order = c(2, 1,0), seasonal = c(3, 0, 0))
model1 <- arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 0, 0))
summary(model1)
checkresiduals(model1)
model1 <- arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 0, 0))
model2 <- arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 0, 1))
model2 <- arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 0, 1))
print(summary(model2))
model1 <- arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 0, 1))
print(summary(model1))
model1 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 0, 1))
model1 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 0, 1))
print(summary(model1))
checkresiduals(model1)
model3 <- arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 1, 1))
model3 <- arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 1, 1))
print(summary(model3))
checkresiduals(model3)
model2 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(2, 0, 1))
model2 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(2, 0, 1))
print(summary(model2))
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 1, 1))
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 1, 1))
print(summary(model3))
checkresiduals(model3)
model4 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 1, 2))
model4 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 1, 2))
print(summary(model4))
checkresiduals(model4)
model4 <- Arima(FRED_pre, order = c(3, 1,1), seasonal = c(3, 1, 2))
model4 <- Arima(FRED_pre, order = c(2, 1,0), seasonal = c(3, 1, 1))
model4 <- Arima(FRED_pre, order = c(2, 1,0), seasonal = c(3, 1, 1))
print(summary(model4))
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(4, 1, 1))
model3 <- Arima(FRED_pre, order = c(3, 1,1), seasonal = c(3, 1, 1))
model3 <- Arima(FRED_pre, order = c(3, 1,2), seasonal = c(3, 1, 1))
model3 <- Arima(FRED_pre, order = c(3, 1,2), seasonal = c(3, 1, 1))
print(summary(model3))
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(1, 1, 1))
print(summary(model3))
checkresiduals(model3)
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(1, 1, 2))
print(summary(model3))
checkresiduals(model3)
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(1, 1, 3))
print(summary(model3))
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(1, 1, 2))
print(summary(model3))
checkresiduals(model3)
mod <- auto.arima(FRED_pre, d = 1, D= 1)
summary(mod)
mod <- auto.arima(FRED_pre, d = 1, D= 1, ic = 'aic')
summary(mod)
mod <- auto.arima(FRED_pre, d = 1, D= 1, ic = 'aic', lambda = lambda)
summary(mod)
model1 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 0, 1), lambda = lambda)
model1 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 0, 1), lambda = lambda)
print(summary(model1))
model2 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(2, 0, 1), lambda = lambda)
print(summary(model2))
checkresiduals(model2)
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(1, 1, 2), lambda = lambda)
print(summary(model3))
checkresiduals(model3)
mod <- auto.arima(FRED_pre, d = 1, D= 1, ic = 'aic', lambda = lambda)
mod <- auto.arima(FRED_pre, d = 1, D= 1, ic = 'aic', lambda = lambda)
summary(mod)
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 1, 1), lambda = lambda)
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 1, 1), lambda = lambda)
print(summary(model3))
checkresiduals(model3)
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(2, 1, 1), lambda = lambda)
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(2, 1, 1), lambda = lambda)
print(summary(model3))
checkresiduals(model3)
model3 <- Arima(FRED_pre, order = c(2, 1,2), seasonal = c(2, 1, 1), lambda = lambda)
print(summary(model3))
model3 <- Arima(FRED_pre, order = c(2, 0,1), seasonal = c(2, 1, 1), lambda = lambda)
print(summary(model3))
model3 <- Arima(FRED_pre, order = c(3, 1,1), seasonal = c(2, 1, 1), lambda = lambda)
print(summary(model3))
model3 <- Arima(FRED_pre, order = c(2, 1,2), seasonal = c(2, 1, 1), lambda = lambda)
print(summary(model3))
model3 <- Arima(FRED_pre, order = c(2, 2,2), seasonal = c(2, 1, 1), lambda = lambda)
print(summary(model3))
model3 <- Arima(FRED_pre, order = c(2, 1,3), seasonal = c(2, 1, 1), lambda = lambda)
print(summary(model3))
model3 <- Arima(FRED_pre, order = c(2, 1,6), seasonal = c(2, 1, 1), lambda = lambda)
model3 <- Arima(FRED_pre, order = c(2, 1,5), seasonal = c(2, 1, 1), lambda = lambda)
print(summary(model3))
checkresiduals(model3)
model3 <- Arima(FRED_pre, order = c(2, 1,3), seasonal = c(2, 1, 1), lambda = lambda)
print(summary(model3))
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(2, 1, 1), lambda = lambda)
print(summary(model3))
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(2, 1, 2), lambda = lambda)
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(2, 1, 2), lambda = lambda)
print(summary(model3))
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(2, 2, 1), lambda = lambda)
print(summary(model3))
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 1, 1), lambda = lambda)
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(3, 1, 1), lambda = lambda)
print(summary(model3))
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(2, 1, 1), lambda = lambda)
model3 <- Arima(FRED_pre, order = c(2, 1,1), seasonal = c(2, 1, 1), lambda = lambda)
print(summary(model3))
checkresiduals(model3)
source('C:/Users/giova/Desktop/FGV/time_series/intervention_analysis/analysis.R', echo=TRUE)
coeftest(model3)
require(lmtest)
coeftest(model3)
